{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///dist/projects/ngx-mousetrap/src/lib/ngx-mousetrap.service.ts","webpack:///dist/projects/ngx-mousetrap/src/lib/ngx-mousetrap.directive.ts","webpack:///dist/projects/ngx-mousetrap/src/lib/ngx-mousetrap.module.ts","webpack:///dist/projects/ngx-mousetrap/src/public-api.ts","webpack:///dist/projects/ngx-mousetrap/src/ngx-mousetrap.ts","webpack:///projects/ngx-mousetrap/src/lib/ngx-mousetrap.directive.ts","webpack:///projects/ngx-mousetrap/src/lib/ngx-mousetrap.module.ts","webpack:///projects/ngx-mousetrap/src/lib/ngx-mousetrap.service.ts","webpack:///projects/ngx-mousetrap/src/public-api.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","NgxMousetrapService","scopedMouseTrap","WeakMap","keyMap","Map","paused","mousetrap","origninalCB","stopCallback","element","combo","apply","key","scope","EMPTY","mousetrapInstance","has","set","get","handler$","asObservable","pipe","throttleTime","Subject","keyCombos","split","map","part","trim","bind","next","event","value","keysList","length","Array","from","forEach","k","_unregister","unbind","complete","NgxMousetrapDirective","elementRef","ngxMousetrapService","mousetrapKeyPressed","EventEmitter","ngxMousetrapKey","console","error","nativeElement","register","subscribe","hkEvent","suppressAutoClick","dispatchEvent","Event","emit","unregister","ElementRef","Input","Output","NgxMousetrapModule","ngModule","providers","AppComponent","service","title","clickedAt","keypressed","keysBound","subscription","demoArea","evt","push","unsubscribe","Date","onClick","AppModule","BrowserModule","ClarityModule","BrowserAnimationsModule","environment","production","enableProdMode","platformBrowser","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;AAAA,eAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,eAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,cAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,WAAC,CAACE,IAAF,GAAS,kBAAT;AACA,gBAAMF,CAAN;AACA,SAJM,CAAP;AAKA;;AACDL,8BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,eAAO,EAAP;AAAY,OAAzD;;AACAR,8BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAA,8BAAwB,CAACS,EAAzB,GAA8B,KAA9B;AACAC,YAAM,CAACC,OAAP,GAAiBX,wBAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCHaY,oB;AAcX,wCAAc;AAAA;;AAAA;;AAVN,eAAAC,eAAA,GAGH,IAAIC,OAAJ,EAHG,CAUM,CANhB;;AAEU,eAAAC,MAAA,GAAqC,IAAIC,GAAJ,EAArC;AAED,eAAAC,MAAA,GAAS,KAAT;AAGL,eAAKC,SAAL,GAAiB,IAAI,sCAAJ,EAAjB;AACA,cAAMC,WAAW,GAAG,KAAKD,SAAL,CAAeE,YAAnC;;AAEA,eAAKF,SAAL,CAAeE,YAAf,GAA8B,UAACf,CAAD,EAAIgB,OAAJ,EAAaC,KAAb,EAAuB;AACnD,gBAAI,KAAI,CAACL,MAAT,EAAiB;AACf,qBAAO,IAAP;AACD;;AACD,mBAAOE,WAAW,CAACI,KAAZ,CAAkB,KAAI,CAACL,SAAvB,EAAkC,CAACb,CAAD,EAAIgB,OAAJ,EAAaC,KAAb,CAAlC,CAAP;AACD,WALD;AAMD;AACH;AAEC;AACE;AACE;AAEJ;;;;;iBAAQ,kBAASE,GAAT,EAAsBC,KAAtB,EAAyC;AAC9C,gBAAI,CAACD,GAAL,EAAU;AACR,qBAAO,kCAAAE,KAAP;AACD;;AAED,gBAAIX,MAAM,GAAG,KAAKA,MAAlB;AACA,gBAAIY,iBAAiB,GAAG,KAAKT,SAA7B;;AAEA,gBAAIO,KAAJ,EAAW;AACT,kBAAI,CAAC,KAAKZ,eAAL,CAAqBe,GAArB,CAAyBH,KAAzB,CAAL,EAAsC;AACpCV,sBAAM,GAAG,IAAIC,GAAJ,EAAT;AACAW,iCAAiB,GAAG,IAAI,sCAAJ,CAAcF,KAAd,CAApB;AACA,qBAAKZ,eAAL,CAAqBgB,GAArB,CAAyBJ,KAAzB,EAAgC;AAAEV,wBAAM,EAANA,MAAF;AAAUG,2BAAS,EAAES;AAArB,iBAAhC;AACD,eAJD,MAIO;AACLA,iCAAiB,GAAG,KAAKd,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCP,SAApD;AACAH,sBAAM,GAAG,KAAKF,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAzC;AACD;AACF;;AAED,gBAAIA,MAAM,CAACa,GAAP,CAAWJ,GAAX,CAAJ,EAAqB;AACnB,qBAAOT,MAAM,CAACe,GAAP,CAAWN,GAAX,EAAgBO,QAAhB,CAAyBC,YAAzB,GAAwCC,IAAxC,CAA6C,gDAAAC,YAAA,EAAa,GAAb,CAA7C,CAAP;AACD;;AAED,gBAAMH,QAAQ,GAAyB,IAAI,kCAAAI,OAAJ,EAAvC;AAEA,gBAAMC,SAAS,GAAGZ,GAAG,CAACa,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmB,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,aAAvB,CAAlB,CAzB8C,CA0BlD;;AACIb,6BAAiB,CAACc,IAAlB,CAAuBL,SAAvB,EAAkC,UAAC/B,CAAD,EAAIiB,KAAJ,EAAsB;AACtDS,sBAAQ,CAACW,IAAT,CAAc;AACZlB,mBAAG,EAAEF,KADO;AAEZqB,qBAAK,EAAEtC;AAFK,eAAd;AAID,aALD;AAOA,gBAAMuC,KAAK,GAAG;AAAEb,sBAAQ,EAARA;AAAF,aAAd;AACAhB,kBAAM,CAACc,GAAP,CAAWL,GAAX,EAAgBoB,KAAhB,EAnC8C,CAoClD;;AAEI,mBAAOb,QAAQ,CAACC,YAAT,GAAwBC,IAAxB,CAA6B,gDAAAC,YAAA,EAAa,GAAb,CAA7B,CAAP;AAED;AACH;AAGA;AACE;AACE;;;;iBACK,sBAAuD;AAAA;;AAAA,gBAA5CT,KAA4C,uEAAvB,IAAuB;;AAAA,8CAAdjB,IAAc;AAAdA,kBAAc;AAAA;;AAC5D,gBAAIU,SAAS,GAAG,KAAKA,SAArB;AACA,gBAAIH,MAAM,GAAG,KAAKA,MAAlB;AACA,gBAAI8B,QAAQ,GAAGrC,IAAf;;AAEA,gBAAIiB,KAAK,IAAI,KAAKZ,eAAL,CAAqBe,GAArB,CAAyBH,KAAzB,CAAb,EAA8C;AAC5CP,uBAAS,GAAG,KAAKL,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCP,SAA5C;AACAH,oBAAM,GAAG,KAAKF,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAzC;;AACA,kBAAI,CAACP,IAAD,IAASA,IAAI,CAACsC,MAAL,KAAgB,CAA7B,EAAgC;AAC9BD,wBAAQ,GAAGE,KAAK,CAACC,IAAN,CAAW,KAAKnC,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAhC,CAAuCP,IAAvC,EAAX,CAAX;AACD;AACF;;AACD,gBAAI,CAACqC,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACtC;AACD;;AACDD,oBAAQ,CAACI,OAAT,CAAiB,UAAAC,CAAC;AAAA,qBAAI,MAAI,CAACC,WAAL,CAAiBD,CAAjB,EAAoBhC,SAApB,EAA+BH,MAA/B,CAAJ;AAAA,aAAlB;AACD;AACH;AAEC;AACE;AACE;AACE;AACE;AAEJ;;;;iBAAK,qBAAYS,GAAZ,EAAyBN,SAAzB,EAAiEH,MAAjE,EAAqG;AAC3GG,qBAAS,CAACkC,MAAV,CAAiB5B,GAAjB;;AACA,gBAAIT,MAAM,CAACa,GAAP,CAAWJ,GAAX,CAAJ,EAAqB;AACnB,kBAAMoB,KAAK,GAAG7B,MAAM,CAACe,GAAP,CAAWN,GAAX,CAAd;AACAoB,mBAAK,CAACb,QAAN,CAAesB,QAAf;AACAtC,oBAAM,UAAN,CAAcS,GAAd;AACD;AACF;;;;;;;;;;AAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhHK;AAAA;AAAA;;AAHL,mBAAU;AAAA,gBAAC,SAAD,KACT,WADS,IACG,SADH,KACS,gEACnB,oBADmB,EACnB;qEAAA;;;;AAAA,UADmB,E;;SAAA,E,IAAA,CADT;OAAV;;UCCY8B,sB;AAWX,wCACUC,UADV,EAEUC,mBAFV,EAEoD;AAAA;;AAD1C,eAAAD,UAAA,GAAAA,UAAA;AACA,eAAAC,mBAAA,GAAAA,mBAAA,CAA0C,CAAD;;AAJzC,eAAAC,mBAAA,GAAiD,IAAI,2CAAAC,YAAJ,EAAjD;AAKT;;;;iBAED,oBAAW;AAAA;;AACT,gBAAI,CAAC,KAAKC,eAAV,EAA2B;AACzBC,qBAAO,CAACC,KAAR,mCAAyC,KAAKN,UAAL,CAAgBO,aAAzD;AACA;AACD;;AAED,iBAAKN,mBAAL,CAAyBO,QAAzB,CAAkC,KAAKJ,eAAvC,EAAwDK,SAAxD,CAAkE,UAAAC,OAAO,EAAI;AAC3E,kBAAI,CAAC,MAAI,CAACC,iBAAV,EAA6B;AAC1B,sBAAI,CAACX,UAAL,CAAgBO,aAAhB,CAA8CK,aAA9C,CAA4D,IAAIC,KAAJ,CAAU,OAAV,CAA5D;AACF;;AACD,oBAAI,CAACX,mBAAL,CAAyBY,IAAzB,CAA8BJ,OAA9B;AACD,aALD;AAMD;;;iBAED,uBAAc;AACZ,gBAAI,KAAKN,eAAT,EAA0B;AACxB,mBAAKH,mBAAL,CAAyBc,UAAzB,CAAoC,IAApC,EAA0C,KAAKX,eAA/C;AACD;AACF;;;;;;2EArCQ,C,EAAA;AAAA,oBACT,2BADS,EACC,gEACX,qDADW,CADD,EAEV,qFAFU;AAEV,O;;;;;;;;;;;;;;AACK;AAAA,gBAA+C;AAAA,gBAPJ,2CAAAY;AAOI,SAA/C,EAPyD;AAAA,gBAEtD3D;AAFsD,SAOzD;AAAA;;AAL4B;AAEvB;AAAA,gBAKR,2CAAA4D;AALQ,UAFuB;AAOrB;AAAA,gBAIV,2CAAAA;AAJU,UAPqB;AAWrB;AAAA,gBAGV,2CAAAC;AAHU;AAXqB;;;;;;;;;;;;;;;;;;;;;;;;;;;UCUrBC,mB;;;;;;;iBACX,mBAAc;AACZ,mBAAO;AACLC,sBAAQ,EAAED,mBADL;AAELE,uBAAS,EAAE,CACThE,oBADS;AAFN,aAAP;AAMD;;;;;;qEAdM,C,EAAC;AAAA,yBACR,mBADQ;AACO,O;;yBAAsB,K,GACrC,aAAW,+DACF;AAAC;AAAD,OADE,C;yBAEX,CAAS,I,GAAG,4EACb;AAAA;AAAA;AAAA,OADa,C;;;;;;;;;;;;;;;;;;;;ACVd;AACA;AACA;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKa0C,uB;AAWX,yCACUC,UADV,EAEUC,mBAFV,EAEoD;AAAA;;AAD1C,eAAAD,UAAA,GAAAA,UAAA;AACA,eAAAC,mBAAA,GAAAA,mBAAA,CAA0C,CALpD;;AACU,eAAAC,mBAAA,GAAiD,IAAI,2CAAAC,YAAJ,EAAjD;AAKT;;;;iBAED,oBAAW;AAAA;;AACT,gBAAI,CAAC,KAAKC,eAAV,EAA2B;AACzBC,qBAAO,CAACC,KAAR,mCAAyC,KAAKN,UAAL,CAAgBO,aAAzD;AACA;AACD;;AAED,iBAAKN,mBAAL,CAAyBO,QAAzB,CAAkC,KAAKJ,eAAvC,EAAwDK,SAAxD,CAAkE,UAAAC,OAAO,EAAI;AAC3E,kBAAI,CAAC,MAAI,CAACC,iBAAV,EAA6B;AAC1B,sBAAI,CAACX,UAAL,CAAgBO,aAAhB,CAA8CK,aAA9C,CAA4D,IAAIC,KAAJ,CAAU,OAAV,CAA5D;AACF;;AACD,oBAAI,CAACX,mBAAL,CAAyBY,IAAzB,CAA8BJ,OAA9B;AACD,aALD;AAMD;;;iBAED,uBAAc;AACZ,gBAAI,KAAKN,eAAT,EAA0B;AACxB,mBAAKH,mBAAL,CAAyBc,UAAzB,CAAoC,IAApC,EAA0C,KAAKX,eAA/C;AACD;AACF;;;;;;;yBAlCUL,uB,EAAqB,sH,EAAA,wI;AAAA,O;;;cAArBA,uB;AAAqB,gD;AAAA;AAAA;AAAA;AAAA,S;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCKrBoB,oB;;;;;;;iBACX,mBAAc;AACZ,mBAAO;AACLC,sBAAQ,EAAED,oBADL;AAELE,uBAAS,EAAE,CACT,oDAAAhE,mBADS;AAFN,aAAP;AAMD;;;;;;;yBARU8D,oB;AAAkB,O;;;cAAlBA;;;mBAFA,CAAC,oDAAA9D,mBAAD,C;AAAqB,kBAFvB,EAEuB;;;;4HAErB8D,oB,EAAkB;AAAA,yBALd,sDAAApB,qBAKc;AALO,oBAE1B,sDAAAA,qBAF0B;AAKP,S;AAHE,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCApB1C,qB;AAcX,yCAAc;AAAA;;AAAA;;AAVN,eAAAC,eAAA,GAGH,IAAIC,OAAJ,EAHG,CAUM,CALd;;AACQ,eAAAC,MAAA,GAAqC,IAAIC,GAAJ,EAArC;AAED,eAAAC,MAAA,GAAS,KAAT;AAGL,eAAKC,SAAL,GAAiB,IAAI,sCAAJ,EAAjB;AACA,cAAMC,WAAW,GAAG,KAAKD,SAAL,CAAeE,YAAnC;;AAEA,eAAKF,SAAL,CAAeE,YAAf,GAA8B,UAACf,CAAD,EAAIgB,OAAJ,EAAaC,KAAb,EAAuB;AACnD,gBAAI,MAAI,CAACL,MAAT,EAAiB;AACf,qBAAO,IAAP;AACD;;AACD,mBAAOE,WAAW,CAACI,KAAZ,CAAkB,MAAI,CAACL,SAAvB,EAAkC,CAACb,CAAD,EAAIgB,OAAJ,EAAaC,KAAb,CAAlC,CAAP;AACD,WALD;AAMD;AAED;;;;;;;;;iBAKO,kBAASE,GAAT,EAAsBC,KAAtB,EAAyC;AAC9C,gBAAI,CAACD,GAAL,EAAU;AACR,qBAAO,kCAAAE,KAAP;AACD;;AAED,gBAAIX,MAAM,GAAG,KAAKA,MAAlB;AACA,gBAAIY,iBAAiB,GAAG,KAAKT,SAA7B;;AAEA,gBAAIO,KAAJ,EAAW;AACT,kBAAI,CAAC,KAAKZ,eAAL,CAAqBe,GAArB,CAAyBH,KAAzB,CAAL,EAAsC;AACpCV,sBAAM,GAAG,IAAIC,GAAJ,EAAT;AACAW,iCAAiB,GAAG,IAAI,sCAAJ,CAAcF,KAAd,CAApB;AACA,qBAAKZ,eAAL,CAAqBgB,GAArB,CAAyBJ,KAAzB,EAAgC;AAAEV,wBAAM,EAANA,MAAF;AAAUG,2BAAS,EAAES;AAArB,iBAAhC;AACD,eAJD,MAIO;AACLA,iCAAiB,GAAG,KAAKd,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCP,SAApD;AACAH,sBAAM,GAAG,KAAKF,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAzC;AACD;AACF;;AAED,gBAAIA,MAAM,CAACa,GAAP,CAAWJ,GAAX,CAAJ,EAAqB;AACnB,qBAAOT,MAAM,CAACe,GAAP,CAAWN,GAAX,EAAgBO,QAAhB,CAAyBC,YAAzB,GAAwCC,IAAxC,CAA6C,gDAAAC,YAAA,EAAa,GAAb,CAA7C,CAAP;AACD;;AAED,gBAAMH,QAAQ,GAAyB,IAAI,kCAAAI,OAAJ,EAAvC;AAEA,gBAAMC,SAAS,GAAGZ,GAAG,CAACa,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmB,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,aAAvB,CAAlB,CAzB8C,CA0B9C;;AACAb,6BAAiB,CAACc,IAAlB,CAAuBL,SAAvB,EAAkC,UAAC/B,CAAD,EAAIiB,KAAJ,EAAsB;AACtDS,sBAAQ,CAACW,IAAT,CAAc;AACZlB,mBAAG,EAAEF,KADO;AAEZqB,qBAAK,EAAEtC;AAFK,eAAd;AAID,aALD;AAOA,gBAAMuC,KAAK,GAAG;AAAEb,sBAAQ,EAARA;AAAF,aAAd;AACAhB,kBAAM,CAACc,GAAP,CAAWL,GAAX,EAAgBoB,KAAhB,EAnC8C,CAqC9C;;AACA,mBAAOb,QAAQ,CAACC,YAAT,GAAwBC,IAAxB,CAA6B,gDAAAC,YAAA,EAAa,GAAb,CAA7B,CAAP;AAED;AAGD;;;;;;;iBAIO,sBAAuD;AAAA;;AAAA,gBAA5CT,KAA4C,uEAAvB,IAAuB;;AAAA,+CAAdjB,IAAc;AAAdA,kBAAc;AAAA;;AAC5D,gBAAIU,SAAS,GAAG,KAAKA,SAArB;AACA,gBAAIH,MAAM,GAAG,KAAKA,MAAlB;AACA,gBAAI8B,QAAQ,GAAGrC,IAAf;;AAEA,gBAAIiB,KAAK,IAAI,KAAKZ,eAAL,CAAqBe,GAArB,CAAyBH,KAAzB,CAAb,EAA8C;AAC5CP,uBAAS,GAAG,KAAKL,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCP,SAA5C;AACAH,oBAAM,GAAG,KAAKF,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAzC;;AACA,kBAAI,CAACP,IAAD,IAASA,IAAI,CAACsC,MAAL,KAAgB,CAA7B,EAAgC;AAC9BD,wBAAQ,GAAGE,KAAK,CAACC,IAAN,CAAW,KAAKnC,eAAL,CAAqBiB,GAArB,CAAyBL,KAAzB,EAAgCV,MAAhC,CAAuCP,IAAvC,EAAX,CAAX;AACD;AACF;;AACD,gBAAI,CAACqC,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;AACtC;AACD;;AACDD,oBAAQ,CAACI,OAAT,CAAiB,UAAAC,CAAC;AAAA,qBAAI,MAAI,CAACC,WAAL,CAAiBD,CAAjB,EAAoBhC,SAApB,EAA+BH,MAA/B,CAAJ;AAAA,aAAlB;AACD;AAED;;;;;;;;;;iBAOQ,qBAAYS,GAAZ,EAAyBN,SAAzB,EAAiEH,MAAjE,EAAqG;AAC3GG,qBAAS,CAACkC,MAAV,CAAiB5B,GAAjB;;AACA,gBAAIT,MAAM,CAACa,GAAP,CAAWJ,GAAX,CAAJ,EAAqB;AACnB,kBAAMoB,KAAK,GAAG7B,MAAM,CAACe,GAAP,CAAWN,GAAX,CAAd;AACAoB,mBAAK,CAACb,QAAN,CAAesB,QAAf;AACAtC,oBAAM,UAAN,CAAcS,GAAd;AACD;AACF;;;;;;;yBA9GUZ,qB;AAAmB,O;;;eAAnBA,qB;AAAmB,iBAAnBA,qBAAmB,K;AAAA,oBAFlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaM;;AACE;;AACF;;;;;;AADE;;AAAA;;;;;;AAeA;;AACE;;AACF;;;;;;AADE;;AAAA;;;;UCrBGiE,a;AAaX,+BAAoBC,OAApB,EAAkD;AAAA;;AAA9B,eAAAA,OAAA,GAAAA,OAAA;AAZpB,eAAAC,KAAA,GAAQ,uBAAR;AACA,eAAAC,SAAA,GAAY,IAAZ;AAEA,eAAAC,UAAA,GAAuB,EAAvB;AAEA,eAAAC,SAAA,GAAY,sFAAZ;AASC;;;;iBAED,oBAAW;AAAA;;AACT,iBAAKC,YAAL,GAAoB,KAAKL,OAAL,CAAaf,QAAb,CAAsB,KAAKmB,SAA3B,EAAsC,KAAKE,QAAL,CAActB,aAApD,EAAmEE,SAAnE,CAA6E,UAAAqB,GAAG,EAAI;AACtG,oBAAI,CAACJ,UAAL,CAAgBK,IAAhB,oBAAiCD,GAAG,CAAC7D,GAArC;AACD,aAFmB,CAApB;AAGD;;;iBAED,uBAAc;AACZ,gBAAI,KAAK2D,YAAT,EAAuB;AACrB,mBAAKA,YAAL,CAAkBI,WAAlB;AACD;AACF;;;iBAGD,mBAAU;AACR,iBAAKP,SAAL,GAAiB,IAAIQ,IAAJ,EAAjB;AACD;;;;;;;yBAhCUX,a,EAAY,uJ;AAAA,O;;;cAAZA,a;AAAY,iC;AAAA;AAAA;8EAUQ,2CAAAN,U;;;;;;;;;;;;;;ADnBjC;;AACE;;AACE;;AACE;;AACE;;AACA;;AAAoB;;AAAqB;;AAC3C;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAgC;AAAA,qBAAS,IAAAkB,OAAA,EAAT;AAAkB,aAAlB;;AAAqE;;AACzE;;AAC5B;;AAIA;;AACE;;AAAgC;;AAChC;;AACE;;AACI;;AACE;;AACF;;AACJ;;AACJ;;AACE;;AACA;;AACA;;AACA;;AAIF;;AACF;;AACF;;AACF;;;;AAzB0D;;AAAA;;AAE9C;;AAAA;;AAeJ;;AAAA;;AACqB;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UERhBC,U;;;;;yBAAAA,U;AAAS,O;;;cAATA,U;AAAS,oBAFR,4CAAAb,YAEQ;;;mBAHT,E;AAAE,kBANJ,CACP,uDAAAc,aADO,EAEP,2CAAAjB,kBAAA,UAFO,EAGP,0CAAAkB,aAHO,EAIP,kEAAAC,uBAJO,CAMI;;;;4HAGFH,U,EAAS;AAAA,yBAXlB,4CAAAb,YAWkB;AAXN,oBAGZ,uDAAAc,aAHY,EAGC,6DAHD,EAKZ,0CAAAC,aALY,EAMZ,kEAAAC,uBANY;AAWM,S;AALK,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UChB3B;AACA;AACA;;;AAEO,UAAMC,YAAW,GAAG;AACzBC,kBAAU,EAAE;AADa,OAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA,UAAI,uDAAAD,WAAA,WAAJ,EAA4B;AAC1B,uDAAAE,cAAA;AACD;;AAED,6DAAAC,eAAA,GAAyBC,eAAzB,CAAyC,6CAAAR,SAAzC,WACS,UAAAS,GAAG;AAAA,eAAIvC,OAAO,CAACC,KAAR,CAAcsC,GAAd,CAAJ;AAAA,OADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 98255;\nmodule.exports = webpackEmptyAsyncContext;","import { Injectable } from '@angular/core';\nimport { NgxKeyHandler, NgxKeyEvent } from './utils';\nimport { Observable, EMPTY, Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport * as Mousetrap from 'mousetrap';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMousetrapService {\n  // current mousetrap instance\n  private mousetrap: Mousetrap.MousetrapInstance;\n\n  private scopedMouseTrap: WeakMap<HTMLElement, {\n    mousetrap: Mousetrap.MousetrapInstance,\n    keyMap: Map<string, NgxKeyHandler>\n  }> = new WeakMap();\n\n  // map of keycombination and hotkey details.\n  private keyMap: Map<string, NgxKeyHandler> = new Map();\n\n  public paused = false;\n\n  constructor() {\n    this.mousetrap = new Mousetrap();\n    const origninalCB = this.mousetrap.stopCallback;\n\n    this.mousetrap.stopCallback = (e, element, combo) => {\n      if (this.paused) {\n        return true;\n      }\n      return origninalCB.apply(this.mousetrap, [e, element, combo]);\n    };\n  }\n\n  /**\n   * Registers the hot key combinations and returns an observable which will be\n   * triggred when hotkey combination is pressed\n   * @param keys list of hotkey combinations\n   */\n  public register(key: string, scope?: HTMLElement): Observable<NgxKeyEvent> {\n    if (!key) {\n      return EMPTY;\n    }\n\n    let keyMap = this.keyMap;\n    let mousetrapInstance = this.mousetrap;\n\n    if (scope) {\n      if (!this.scopedMouseTrap.has(scope)) {\n        keyMap = new Map();\n        mousetrapInstance = new Mousetrap(scope);\n        this.scopedMouseTrap.set(scope, { keyMap, mousetrap: mousetrapInstance });\n      } else {\n        mousetrapInstance = this.scopedMouseTrap.get(scope).mousetrap;\n        keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      }\n    }\n\n    if (keyMap.has(key)) {\n      return keyMap.get(key).handler$.asObservable().pipe(throttleTime(300));\n    }\n\n    const handler$: Subject<NgxKeyEvent> = new Subject();\n\n    const keyCombos = key.split('|').map(part => part.trim());\n    // bind the key to mousetrap\n    mousetrapInstance.bind(keyCombos, (e, combo: string) => {\n      handler$.next({\n        key: combo,\n        event: e\n      });\n    });\n\n    const value = { handler$ };\n    keyMap.set(key, value);\n\n    // throttle the key press.\n    return handler$.asObservable().pipe(throttleTime(300));\n\n  }\n\n\n  /**\n   * unregister the keys.\n   * @param keys list of key combnations\n   */\n  public unregister(scope: HTMLElement = null, ...keys: string[]): void {\n    let mousetrap = this.mousetrap;\n    let keyMap = this.keyMap;\n    let keysList = keys;\n\n    if (scope && this.scopedMouseTrap.has(scope)) {\n      mousetrap = this.scopedMouseTrap.get(scope).mousetrap;\n      keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      if (!keys || keys.length === 0) {\n        keysList = Array.from(this.scopedMouseTrap.get(scope).keyMap.keys());\n      }\n    }\n    if (!keysList || keysList.length === 0) {\n      return;\n    }\n    keysList.forEach(k => this._unregister(k, mousetrap, keyMap));\n  }\n\n  /**\n   * unregister the given key combination.\n   * if the key is the last key for the observable, the complete the observable.\n   * @param key key combination\n   * @param mousetrap mousetrap instance\n   * @param keyMap key map\n   */\n  private _unregister(key: string, mousetrap: Mousetrap.MousetrapInstance, keyMap: Map<string, NgxKeyHandler>) {\n    mousetrap.unbind(key);\n    if (keyMap.has(key)) {\n      const value = keyMap.get(key);\n      value.handler$.complete();\n      keyMap.delete(key);\n    }\n  }\n\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { NgxKeyEvent } from './utils';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n@Directive({\n  selector: '[ngxMousetrapKey]'\n})\nexport class NgxMousetrapDirective implements OnInit, OnDestroy {\n  // list of hot key combination for this element.\n  @Input() ngxMousetrapKey: string;\n\n  // by default simulate click event on the element if hotkey is pressed.\n  // use this flag to turn off the behavior\n  @Input() suppressAutoClick: boolean;\n\n  // emits an event when hotkey is pressed.\n  @Output() mousetrapKeyPressed: EventEmitter<NgxKeyEvent> = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private ngxMousetrapService: NgxMousetrapService) {\n  }\n\n  ngOnInit() {\n    if (!this.ngxMousetrapKey) {\n      console.error(`No hotkey available for ${this.elementRef.nativeElement}`);\n      return;\n    }\n\n    this.ngxMousetrapService.register(this.ngxMousetrapKey).subscribe(hkEvent => {\n      if (!this.suppressAutoClick) {\n        (this.elementRef.nativeElement as HTMLElement).dispatchEvent(new Event('click'));\n      }\n      this.mousetrapKeyPressed.emit(hkEvent);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.ngxMousetrapKey) {\n      this.ngxMousetrapService.unregister(null, this.ngxMousetrapKey);\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMousetrapDirective } from './ngx-mousetrap.directive';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n\n\n@NgModule({\n  declarations: [NgxMousetrapDirective],\n  imports: [],\n  exports: [NgxMousetrapDirective],\n  providers: [NgxMousetrapService]\n})\nexport class NgxMousetrapModule {\n  static forRoot(): ModuleWithProviders<NgxMousetrapModule> {\n    return {\n      ngModule: NgxMousetrapModule,\n      providers: [\n        NgxMousetrapService\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-mousetrap\n */\n\nexport * from './lib/ngx-mousetrap.service';\nexport * from './lib/ngx-mousetrap.directive';\nexport * from './lib/ngx-mousetrap.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { NgxKeyEvent } from './utils';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n@Directive({\n  selector: '[ngxMousetrapKey]'\n})\nexport class NgxMousetrapDirective implements OnInit, OnDestroy {\n  // list of hot key combination for this element.\n  @Input() ngxMousetrapKey: string;\n\n  // by default simulate click event on the element if hotkey is pressed.\n  // use this flag to turn off the behavior\n  @Input() suppressAutoClick: boolean;\n\n  // emits an event when hotkey is pressed.\n  @Output() mousetrapKeyPressed: EventEmitter<NgxKeyEvent> = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private ngxMousetrapService: NgxMousetrapService) {\n  }\n\n  ngOnInit() {\n    if (!this.ngxMousetrapKey) {\n      console.error(`No hotkey available for ${this.elementRef.nativeElement}`);\n      return;\n    }\n\n    this.ngxMousetrapService.register(this.ngxMousetrapKey).subscribe(hkEvent => {\n      if (!this.suppressAutoClick) {\n        (this.elementRef.nativeElement as HTMLElement).dispatchEvent(new Event('click'));\n      }\n      this.mousetrapKeyPressed.emit(hkEvent);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.ngxMousetrapKey) {\n      this.ngxMousetrapService.unregister(null, this.ngxMousetrapKey);\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMousetrapDirective } from './ngx-mousetrap.directive';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n\n\n@NgModule({\n  declarations: [NgxMousetrapDirective],\n  imports: [],\n  exports: [NgxMousetrapDirective],\n  providers: [NgxMousetrapService]\n})\nexport class NgxMousetrapModule {\n  static forRoot(): ModuleWithProviders<NgxMousetrapModule> {\n    return {\n      ngModule: NgxMousetrapModule,\n      providers: [\n        NgxMousetrapService\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxKeyHandler, NgxKeyEvent } from './utils';\nimport { Observable, EMPTY, Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport * as Mousetrap from 'mousetrap';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMousetrapService {\n  // current mousetrap instance\n  private mousetrap: Mousetrap.MousetrapInstance;\n\n  private scopedMouseTrap: WeakMap<HTMLElement, {\n    mousetrap: Mousetrap.MousetrapInstance,\n    keyMap: Map<string, NgxKeyHandler>\n  }> = new WeakMap();\n\n  // map of keycombination and hotkey details.\n  private keyMap: Map<string, NgxKeyHandler> = new Map();\n\n  public paused = false;\n\n  constructor() {\n    this.mousetrap = new Mousetrap();\n    const origninalCB = this.mousetrap.stopCallback;\n\n    this.mousetrap.stopCallback = (e, element, combo) => {\n      if (this.paused) {\n        return true;\n      }\n      return origninalCB.apply(this.mousetrap, [e, element, combo]);\n    };\n  }\n\n  /**\n   * Registers the hot key combinations and returns an observable which will be\n   * triggred when hotkey combination is pressed\n   * @param keys list of hotkey combinations\n   */\n  public register(key: string, scope?: HTMLElement): Observable<NgxKeyEvent> {\n    if (!key) {\n      return EMPTY;\n    }\n\n    let keyMap = this.keyMap;\n    let mousetrapInstance = this.mousetrap;\n\n    if (scope) {\n      if (!this.scopedMouseTrap.has(scope)) {\n        keyMap = new Map();\n        mousetrapInstance = new Mousetrap(scope);\n        this.scopedMouseTrap.set(scope, { keyMap, mousetrap: mousetrapInstance });\n      } else {\n        mousetrapInstance = this.scopedMouseTrap.get(scope).mousetrap;\n        keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      }\n    }\n\n    if (keyMap.has(key)) {\n      return keyMap.get(key).handler$.asObservable().pipe(throttleTime(300));\n    }\n\n    const handler$: Subject<NgxKeyEvent> = new Subject();\n\n    const keyCombos = key.split('|').map(part => part.trim());\n    // bind the key to mousetrap\n    mousetrapInstance.bind(keyCombos, (e, combo: string) => {\n      handler$.next({\n        key: combo,\n        event: e\n      });\n    });\n\n    const value = { handler$ };\n    keyMap.set(key, value);\n\n    // throttle the key press.\n    return handler$.asObservable().pipe(throttleTime(300));\n\n  }\n\n\n  /**\n   * unregister the keys.\n   * @param keys list of key combnations\n   */\n  public unregister(scope: HTMLElement = null, ...keys: string[]): void {\n    let mousetrap = this.mousetrap;\n    let keyMap = this.keyMap;\n    let keysList = keys;\n\n    if (scope && this.scopedMouseTrap.has(scope)) {\n      mousetrap = this.scopedMouseTrap.get(scope).mousetrap;\n      keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      if (!keys || keys.length === 0) {\n        keysList = Array.from(this.scopedMouseTrap.get(scope).keyMap.keys());\n      }\n    }\n    if (!keysList || keysList.length === 0) {\n      return;\n    }\n    keysList.forEach(k => this._unregister(k, mousetrap, keyMap));\n  }\n\n  /**\n   * unregister the given key combination.\n   * if the key is the last key for the observable, the complete the observable.\n   * @param key key combination\n   * @param mousetrap mousetrap instance\n   * @param keyMap key map\n   */\n  private _unregister(key: string, mousetrap: Mousetrap.MousetrapInstance, keyMap: Map<string, NgxKeyHandler>) {\n    mousetrap.unbind(key);\n    if (keyMap.has(key)) {\n      const value = keyMap.get(key);\n      value.handler$.complete();\n      keyMap.delete(key);\n    }\n  }\n\n}\n","/*\n * Public API Surface of ngx-mousetrap\n */\n\nexport * from './lib/ngx-mousetrap.service';\nexport * from './lib/ngx-mousetrap.directive';\nexport * from './lib/ngx-mousetrap.module';\n","<div class=\"main-container\">\n  <header class=\"header header-6\">\n    <div class=\"branding\">\n      <a href=\"javascript:void(0)\" class=\"nav-link\">\n        <clr-icon shape=\"vm-bug\"></clr-icon>\n        <span class=\"title\">Project NGX Mousetrap</span>\n      </a>\n    </div>\n  </header>\n  <div class=\"content-container\">\n    <div class=\"content-area\">\n      <button class=\"btn btn-primary\" (click)=\"onClick()\" [ngxMousetrapKey]=\"'command+enter | ctrl+enter'\">Click or\n        press (command/ctrl)+enter</button>\n      <div *ngIf=\"clickedAt\">\n        Clicked at {{clickedAt}}\n      </div>\n\n      <div class=\"service-demo\" tabindex=\"0\" #demoArea>\n        NgxMousetrap Service Demo Area. <br/>\n        <clr-alert>\n          <clr-alert-item>\n              <span class=\"alert-text\">\n                Keys are bound only to this area, focus this area before pressing hotkeys.\n              </span>\n          </clr-alert-item>\n      </clr-alert>\n        Following keys are bound\n        <br />\n        {{keysBound}}\n        <div *ngFor=\"let key of keypressed\">\n          {{key}}\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NgxMousetrapService } from 'projects/ngx-mousetrap/src/public-api';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  title = 'ngx-mousetrap-angular';\n  clickedAt = null;\n\n  keypressed: string[] = [];\n\n  keysBound = '? | esc | up up down down | command+shift+k | ctrl+s | command+s | alt+r | h e l l o';\n\n  private subscription: Subscription;\n\n  @ViewChild('demoArea', { read: ElementRef, static: true })\n  demoArea: ElementRef;\n\n  constructor(private service: NgxMousetrapService) {\n\n  }\n\n  ngOnInit() {\n    this.subscription = this.service.register(this.keysBound, this.demoArea.nativeElement).subscribe(evt => {\n      this.keypressed.push(`Detected ${evt.key}`);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n\n  onClick() {\n    this.clickedAt = new Date();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxMousetrapModule } from 'ngx-mousetrap';\n\nimport { AppComponent } from './app.component';\nimport { ClarityModule } from '@clr/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxMousetrapModule.forRoot(),\n    ClarityModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}