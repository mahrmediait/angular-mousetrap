{"version":3,"file":"ngx-mousetrap.js","sources":["../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.service.ts","../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.directive.ts","../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.module.ts","../../../projects/ngx-mousetrap/src/public-api.ts","../../../projects/ngx-mousetrap/src/ngx-mousetrap.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgxKeyHandler, NgxKeyEvent } from './utils';\nimport { Observable, EMPTY, Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport * as Mousetrap from 'mousetrap';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMousetrapService {\n  // current mousetrap instance\n  private mousetrap: Mousetrap.MousetrapInstance;\n\n  private scopedMouseTrap: WeakMap<HTMLElement, {\n    mousetrap: Mousetrap.MousetrapInstance,\n    keyMap: Map<string, NgxKeyHandler>\n  }> = new WeakMap();\n\n  // map of keycombination and hotkey details.\n  private keyMap: Map<string, NgxKeyHandler> = new Map();\n\n  public paused = false;\n\n  constructor() {\n    this.mousetrap = new Mousetrap();\n    const origninalCB = this.mousetrap.stopCallback;\n\n    this.mousetrap.stopCallback = (e, element, combo) => {\n      if (this.paused) {\n        return true;\n      }\n      return origninalCB.apply(this.mousetrap, [e, element, combo]);\n    };\n  }\n\n  /**\n   * Registers the hot key combinations and returns an observable which will be\n   * triggred when hotkey combination is pressed\n   * @param keys list of hotkey combinations\n   */\n  public register(key: string, scope?: HTMLElement): Observable<NgxKeyEvent> {\n    if (!key) {\n      return EMPTY;\n    }\n\n    let keyMap = this.keyMap;\n    let mousetrapInstance = this.mousetrap;\n\n    if (scope) {\n      if (!this.scopedMouseTrap.has(scope)) {\n        keyMap = new Map();\n        mousetrapInstance = new Mousetrap(scope);\n        this.scopedMouseTrap.set(scope, { keyMap, mousetrap: mousetrapInstance });\n      } else {\n        mousetrapInstance = this.scopedMouseTrap.get(scope).mousetrap;\n        keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      }\n    }\n\n    if (keyMap.has(key)) {\n      return keyMap.get(key).handler$.asObservable().pipe(throttleTime(300));\n    }\n\n    const handler$: Subject<NgxKeyEvent> = new Subject();\n\n    const keyCombos = key.split('|').map(part => part.trim());\n    // bind the key to mousetrap\n    mousetrapInstance.bind(keyCombos, (e, combo: string) => {\n      handler$.next({\n        key: combo,\n        event: e\n      });\n    });\n\n    const value = { handler$ };\n    keyMap.set(key, value);\n\n    // throttle the key press.\n    return handler$.asObservable().pipe(throttleTime(300));\n\n  }\n\n\n  /**\n   * unregister the keys.\n   * @param keys list of key combnations\n   */\n  public unregister(scope: HTMLElement = null, ...keys: string[]): void {\n    let mousetrap = this.mousetrap;\n    let keyMap = this.keyMap;\n    let keysList = keys;\n\n    if (scope && this.scopedMouseTrap.has(scope)) {\n      mousetrap = this.scopedMouseTrap.get(scope).mousetrap;\n      keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      if (!keys || keys.length === 0) {\n        keysList = Array.from(this.scopedMouseTrap.get(scope).keyMap.keys());\n      }\n    }\n    if (!keysList || keysList.length === 0) {\n      return;\n    }\n    keysList.forEach(k => this._unregister(k, mousetrap, keyMap));\n  }\n\n  /**\n   * unregister the given key combination.\n   * if the key is the last key for the observable, the complete the observable.\n   * @param key key combination\n   * @param mousetrap mousetrap instance\n   * @param keyMap key map\n   */\n  private _unregister(key: string, mousetrap: Mousetrap.MousetrapInstance, keyMap: Map<string, NgxKeyHandler>) {\n    mousetrap.unbind(key);\n    if (keyMap.has(key)) {\n      const value = keyMap.get(key);\n      value.handler$.complete();\n      keyMap.delete(key);\n    }\n  }\n\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { NgxKeyEvent } from './utils';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n@Directive({\n  selector: '[ngxMousetrapKey]'\n})\nexport class NgxMousetrapDirective implements OnInit, OnDestroy {\n  // list of hot key combination for this element.\n  @Input() ngxMousetrapKey: string;\n\n  // by default simulate click event on the element if hotkey is pressed.\n  // use this flag to turn off the behavior\n  @Input() suppressAutoClick: boolean;\n\n  // emits an event when hotkey is pressed.\n  @Output() mousetrapKeyPressed: EventEmitter<NgxKeyEvent> = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private ngxMousetrapService: NgxMousetrapService) {\n  }\n\n  ngOnInit() {\n    if (!this.ngxMousetrapKey) {\n      console.error(`No hotkey available for ${this.elementRef.nativeElement}`);\n      return;\n    }\n\n    this.ngxMousetrapService.register(this.ngxMousetrapKey).subscribe(hkEvent => {\n      if (!this.suppressAutoClick) {\n        (this.elementRef.nativeElement as HTMLElement).dispatchEvent(new Event('click'));\n      }\n      this.mousetrapKeyPressed.emit(hkEvent);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.ngxMousetrapKey) {\n      this.ngxMousetrapService.unregister(null, this.ngxMousetrapKey);\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMousetrapDirective } from './ngx-mousetrap.directive';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n\n\n@NgModule({\n  declarations: [NgxMousetrapDirective],\n  imports: [],\n  exports: [NgxMousetrapDirective],\n  providers: [NgxMousetrapService]\n})\nexport class NgxMousetrapModule {\n  static forRoot(): ModuleWithProviders<NgxMousetrapModule> {\n    return {\n      ngModule: NgxMousetrapModule,\n      providers: [\n        NgxMousetrapService\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-mousetrap\n */\n\nexport * from './lib/ngx-mousetrap.service';\nexport * from './lib/ngx-mousetrap.directive';\nexport * from './lib/ngx-mousetrap.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}