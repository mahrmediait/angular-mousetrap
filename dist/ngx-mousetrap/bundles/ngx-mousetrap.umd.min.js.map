{"version":3,"sources":["../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.service.ts","../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.directive.ts","../../../projects/ngx-mousetrap/src/lib/ngx-mousetrap.module.ts"],"names":["NgxMousetrapService","_this","this","scopedMouseTrap","WeakMap","keyMap","Map","paused","mousetrap","Mousetrap","origninalCB","stopCallback","e","element","combo","apply","prototype","register","key","scope","EMPTY","mousetrapInstance","has","get","set","handler$","asObservable","pipe","throttleTime","Subject","keyCombos","split","map","part","trim","bind","next","event","value","unregister","keys","_i","arguments","length","keysList","Array","from","forEach","k","_unregister","unbind","complete","delete","Injectable","args","providedIn","NgxMousetrapDirective","elementRef","ngxMousetrapService","mousetrapKeyPressed","EventEmitter","ngOnInit","ngxMousetrapKey","subscribe","hkEvent","suppressAutoClick","nativeElement","dispatchEvent","Event","emit","console","error","ngOnDestroy","Directive","selector","ElementRef","Input","Output","NgxMousetrapModule","forRoot","ngModule","providers","NgModule","declarations","imports","exports"],"mappings":"iwBAuBE,SAAAA,IAAA,IAAAC,EAAAC,KAVQA,KAAAC,gBAGH,IAAIC,QAGDF,KAAAG,OAAqC,IAAIC,IAE1CJ,KAAAK,QAAS,EAGdL,KAAKM,UAAY,IAAIC,EACrB,IAAMC,EAAcR,KAAKM,UAAUG,aAEnCT,KAAKM,UAAUG,aAAe,SAACC,EAAGC,EAASC,GACzC,QAAIb,EAAKM,QAGFG,EAAYK,MAAMd,EAAKO,UAAW,CAACI,EAAGC,EAASC,YASnDd,EAAAgB,UAAAC,SAAA,SAASC,EAAaC,GAC3B,IAAKD,EACH,OAAOE,EAAAA,MAGT,IAAIf,EAASH,KAAKG,OACdgB,EAAoBnB,KAAKM,UAa7B,GAXIW,IACGjB,KAAKC,gBAAgBmB,IAAIH,IAK5BE,EAAoBnB,KAAKC,gBAAgBoB,IAAIJ,GAAOX,UACpDH,EAASH,KAAKC,gBAAgBoB,IAAIJ,GAAOd,SALzCA,EAAS,IAAIC,IACbe,EAAoB,IAAIZ,EAAUU,GAClCjB,KAAKC,gBAAgBqB,IAAIL,EAAO,CAAEd,OAAMA,EAAEG,UAAWa,MAOrDhB,EAAOiB,IAAIJ,GACb,OAAOb,EAAOkB,IAAIL,GAAKO,SAASC,eAAeC,KAAKC,EAAAA,aAAa,MAGnE,IAAMH,EAAiC,IAAII,EAAAA,QAErCC,EAAYZ,EAAIa,MAAM,KAAKC,KAAI,SAAAC,GAAQ,OAAAA,EAAKC,UAElDb,EAAkBc,KAAKL,GAAW,SAAClB,EAAGE,GACpCW,EAASW,KAAK,CACZlB,IAAKJ,EACLuB,MAAOzB,OAIX,IAAM0B,EAAQ,CAAEb,SAAQA,GAIxB,OAHApB,EAAOmB,IAAIN,EAAKoB,GAGTb,EAASC,eAAeC,KAAKC,EAAAA,aAAa,OAS5C5B,EAAAgB,UAAAuB,WAAA,SAAWpB,GAAX,IAAAlB,EAAAC,UAAW,IAAAiB,IAAAA,EAAA,UAA2B,IAAAqB,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAC3C,IAAIjC,EAAYN,KAAKM,UACjBH,EAASH,KAAKG,OACduC,EAAWJ,EAEXrB,GAASjB,KAAKC,gBAAgBmB,IAAIH,KACpCX,EAAYN,KAAKC,gBAAgBoB,IAAIJ,GAAOX,UAC5CH,EAASH,KAAKC,gBAAgBoB,IAAIJ,GAAOd,OACpCmC,GAAwB,IAAhBA,EAAKG,SAChBC,EAAWC,MAAMC,KAAK5C,KAAKC,gBAAgBoB,IAAIJ,GAAOd,OAAOmC,UAG5DI,GAAgC,IAApBA,EAASD,QAG1BC,EAASG,SAAQ,SAAAC,GAAK,OAAA/C,EAAKgD,YAAYD,EAAGxC,EAAWH,OAU/CL,EAAAgB,UAAAiC,YAAA,SAAY/B,EAAaV,EAAwCH,IACvEG,EAAU0C,OAAOhC,GACbb,EAAOiB,IAAIJ,MACCb,EAAOkB,IAAIL,GACnBO,SAAS0B,WACf9C,EAAO+C,OAAOlC,yHA/GnBmC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kECWZ,SAAAC,EACUC,EACAC,GADAxD,KAAAuD,WAAAA,EACAvD,KAAAwD,oBAAAA,EAJAxD,KAAAyD,oBAAiD,IAAIC,EAAAA,oBAO/DJ,EAAAxC,UAAA6C,SAAA,WAAA,IAAA5D,EAAAC,KACOA,KAAK4D,gBAKV5D,KAAKwD,oBAAoBzC,SAASf,KAAK4D,iBAAiBC,WAAU,SAAAC,GAC3D/D,EAAKgE,mBACPhE,EAAKwD,WAAWS,cAA8BC,cAAc,IAAIC,MAAM,UAEzEnE,EAAK0D,oBAAoBU,KAAKL,MAR9BM,QAAQC,MAAM,2BAA2BrE,KAAKuD,WAAWS,gBAY7DV,EAAAxC,UAAAwD,YAAA,WACMtE,KAAK4D,iBACP5D,KAAKwD,oBAAoBnB,WAAW,KAAMrC,KAAK4D,2CAnCpDW,EAAAA,UAASnB,KAAA,CAAC,CACToB,SAAU,iEALqCC,EAAAA,kBAExC3E,8CAON4E,EAAAA,iCAIAA,EAAAA,mCAGAC,EAAAA,2BCJH,SAAAC,YACSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACTjF,8BAXPkF,EAAAA,SAAQ5B,KAAA,CAAC,CACR6B,aAAc,CAAC3B,GACf4B,QAAS,GACTC,QAAS,CAAC7B,GACVyB,UAAW,CAACjF","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgxKeyHandler, NgxKeyEvent } from './utils';\nimport { Observable, EMPTY, Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport * as Mousetrap from 'mousetrap';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMousetrapService {\n  // current mousetrap instance\n  private mousetrap: Mousetrap.MousetrapInstance;\n\n  private scopedMouseTrap: WeakMap<HTMLElement, {\n    mousetrap: Mousetrap.MousetrapInstance,\n    keyMap: Map<string, NgxKeyHandler>\n  }> = new WeakMap();\n\n  // map of keycombination and hotkey details.\n  private keyMap: Map<string, NgxKeyHandler> = new Map();\n\n  public paused = false;\n\n  constructor() {\n    this.mousetrap = new Mousetrap();\n    const origninalCB = this.mousetrap.stopCallback;\n\n    this.mousetrap.stopCallback = (e, element, combo) => {\n      if (this.paused) {\n        return true;\n      }\n      return origninalCB.apply(this.mousetrap, [e, element, combo]);\n    };\n  }\n\n  /**\n   * Registers the hot key combinations and returns an observable which will be\n   * triggred when hotkey combination is pressed\n   * @param keys list of hotkey combinations\n   */\n  public register(key: string, scope?: HTMLElement): Observable<NgxKeyEvent> {\n    if (!key) {\n      return EMPTY;\n    }\n\n    let keyMap = this.keyMap;\n    let mousetrapInstance = this.mousetrap;\n\n    if (scope) {\n      if (!this.scopedMouseTrap.has(scope)) {\n        keyMap = new Map();\n        mousetrapInstance = new Mousetrap(scope);\n        this.scopedMouseTrap.set(scope, { keyMap, mousetrap: mousetrapInstance });\n      } else {\n        mousetrapInstance = this.scopedMouseTrap.get(scope).mousetrap;\n        keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      }\n    }\n\n    if (keyMap.has(key)) {\n      return keyMap.get(key).handler$.asObservable().pipe(throttleTime(300));\n    }\n\n    const handler$: Subject<NgxKeyEvent> = new Subject();\n\n    const keyCombos = key.split('|').map(part => part.trim());\n    // bind the key to mousetrap\n    mousetrapInstance.bind(keyCombos, (e, combo: string) => {\n      handler$.next({\n        key: combo,\n        event: e\n      });\n    });\n\n    const value = { handler$ };\n    keyMap.set(key, value);\n\n    // throttle the key press.\n    return handler$.asObservable().pipe(throttleTime(300));\n\n  }\n\n\n  /**\n   * unregister the keys.\n   * @param keys list of key combnations\n   */\n  public unregister(scope: HTMLElement = null, ...keys: string[]): void {\n    let mousetrap = this.mousetrap;\n    let keyMap = this.keyMap;\n    let keysList = keys;\n\n    if (scope && this.scopedMouseTrap.has(scope)) {\n      mousetrap = this.scopedMouseTrap.get(scope).mousetrap;\n      keyMap = this.scopedMouseTrap.get(scope).keyMap;\n      if (!keys || keys.length === 0) {\n        keysList = Array.from(this.scopedMouseTrap.get(scope).keyMap.keys());\n      }\n    }\n    if (!keysList || keysList.length === 0) {\n      return;\n    }\n    keysList.forEach(k => this._unregister(k, mousetrap, keyMap));\n  }\n\n  /**\n   * unregister the given key combination.\n   * if the key is the last key for the observable, the complete the observable.\n   * @param key key combination\n   * @param mousetrap mousetrap instance\n   * @param keyMap key map\n   */\n  private _unregister(key: string, mousetrap: Mousetrap.MousetrapInstance, keyMap: Map<string, NgxKeyHandler>) {\n    mousetrap.unbind(key);\n    if (keyMap.has(key)) {\n      const value = keyMap.get(key);\n      value.handler$.complete();\n      keyMap.delete(key);\n    }\n  }\n\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { NgxKeyEvent } from './utils';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n@Directive({\n  selector: '[ngxMousetrapKey]'\n})\nexport class NgxMousetrapDirective implements OnInit, OnDestroy {\n  // list of hot key combination for this element.\n  @Input() ngxMousetrapKey: string;\n\n  // by default simulate click event on the element if hotkey is pressed.\n  // use this flag to turn off the behavior\n  @Input() suppressAutoClick: boolean;\n\n  // emits an event when hotkey is pressed.\n  @Output() mousetrapKeyPressed: EventEmitter<NgxKeyEvent> = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private ngxMousetrapService: NgxMousetrapService) {\n  }\n\n  ngOnInit() {\n    if (!this.ngxMousetrapKey) {\n      console.error(`No hotkey available for ${this.elementRef.nativeElement}`);\n      return;\n    }\n\n    this.ngxMousetrapService.register(this.ngxMousetrapKey).subscribe(hkEvent => {\n      if (!this.suppressAutoClick) {\n        (this.elementRef.nativeElement as HTMLElement).dispatchEvent(new Event('click'));\n      }\n      this.mousetrapKeyPressed.emit(hkEvent);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.ngxMousetrapKey) {\n      this.ngxMousetrapService.unregister(null, this.ngxMousetrapKey);\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMousetrapDirective } from './ngx-mousetrap.directive';\nimport { NgxMousetrapService } from './ngx-mousetrap.service';\n\n\n\n@NgModule({\n  declarations: [NgxMousetrapDirective],\n  imports: [],\n  exports: [NgxMousetrapDirective],\n  providers: [NgxMousetrapService]\n})\nexport class NgxMousetrapModule {\n  static forRoot(): ModuleWithProviders<NgxMousetrapModule> {\n    return {\n      ngModule: NgxMousetrapModule,\n      providers: [\n        NgxMousetrapService\n      ]\n    };\n  }\n}\n"]}